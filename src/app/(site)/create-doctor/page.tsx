"use client";

import { useEffect, useState } from "react";
import Breadcrumb from "@/components/Breadscum";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
import Select from "react-select";
import "../contact-us/style.scss"
import DoctorLevelTable from "./doctor-level";

const MySwal = withReactContent(Swal);

interface Hospital {
    _id: string;
    name: string;
}

interface Specialty {
    _id: string;
    name: string;
}

interface DoctorLevel {
    _id: string;
    name: string;
    description: string;
    base_price: number;
}

export default function RegisterAsDoctor() {
    const [hospitals, setHospitals] = useState<Hospital[]>([]);
    const [specialties, setSpecialties] = useState<Specialty[]>([]);
    const [specialitySelected, setSpecialitySelected] = useState<Specialty[]>([]);
    const [levels, setLevels] = useState<DoctorLevel[]>([]);
    const [loading, setLoading] = useState(false);
    const [cities, setCities] = useState<any[]>([]);
    const [loadingCities, setLoadingCities] = useState(false);
    const [selectedCity, setSelectedCity] = useState('');
    const specialtyOptions = specialties.map((s: Specialty) => ({
        value: s?._id,
        label: s?.name,
    }));
    const cityOptions = cities.map((city) => ({
        value: city.name,
        label: city.name,
    }));

    useEffect(() => {
        const fetchCities = async () => {
            setLoadingCities(true);
            try {
                const response = await fetch('https://provinces.open-api.vn/api/').then(res => res.json())
                setCities(response);
            } catch (error) {
                console.error(error);
            } finally {
                setLoadingCities(false);
            }
        };
        fetchCities();

        fetch("https://api.talktodoc.online/api/v1/hospitals")
            .then((res) => res.json())
            .then(setHospitals)
            .catch(console.error);

        fetch("https://api.talktodoc.online/api/v1/specialities")
            .then((res) => res.json())
            .then(setSpecialties)
            .catch(console.error);

        fetch("https://api.talktodoc.online/api/v1/doctor_levels")
            .then((res) => res.json())
            .then(setLevels)
            .catch(console.error);
    }, []);
    const customComponents = {
        IndicatorSeparator: () => null, // ‚õîÔ∏è ·∫®n thanh g·∫°ch |
    };
    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setLoading(true);

        const formData = new FormData(e.currentTarget);
        const data = Object.fromEntries(formData.entries());

        try {
            const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/doctors`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data),
            });

            if (!res.ok) throw new Error("G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i.");

            await MySwal.fire({
                title: "G·ª≠i th√†nh c√¥ng!",
                text: "Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.",
                icon: "success",
                confirmButtonText: "ƒê√≥ng",
            });
        } catch (err: any) {
            await MySwal.fire({
                title: "L·ªói",
                text: err.message || "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.",
                icon: "error",
                confirmButtonText: "ƒê√≥ng",
            });
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Breadcrumb title="ƒêƒÉng K√Ω L√†m B√°c Sƒ© T·∫°i TalkToDoc" />
            <main className="container mx-auto px-4 sm:px-6 lg:px-8 lg:max-w-screen-xl md:max-w-screen-md py-10 contact-us-page flex flex-col gap-16">
                <div className="contact-us-content flex flex-col md:flex-row gap-8">
                    <div className="contact-us-content-left w-full md:w-1/3 space-y-4">
                        <p className="font-semibold sub-title text-lg sm:text-xl">Tham gia TalkToDoc</p>
                        <h2 className="text-gray-600 main-title text-2xl sm:text-3xl">
                            V√¨ sao b·∫°n n√™n tham gia TalkToDoc?
                        </h2>
                        <ul className="text-gray-600 list-disc pl-5 text-sm sm:text-base space-y-1">
                            <li>Ti·∫øp c·∫≠n h√†ng ngh√¨n b·ªánh nh√¢n m·ªói th√°ng</li>
                            <li>Ch·ªß ƒë·ªông l·ªãch kh√°m, tƒÉng thu nh·∫≠p</li>
                            <li>H·ªá th·ªëng h·ªó tr·ª£ ƒë·∫∑t l·ªãch v√† t∆∞ v·∫•n online</li>
                        </ul>
                    </div>

                    <div className="contact-us-content-right w-full md:w-2/3">
                        <form
                            onSubmit={handleSubmit}
                            className="contact-us-form bg-white p-6 rounded-lg shadow-md space-y-4"
                        >
                            <h2 className="text-xl font-semibold text-center">üìã ƒêƒÉng k√Ω l√†m b√°c sƒ©</h2>

                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <input name="fullName" placeholder="H·ªç v√† t√™n" required className="input" />
                                <input name="email" type="email" placeholder="Email" required className="input" />
                                <input name="phoneNumber" placeholder="S·ªë ƒëi·ªán tho·∫°i" required className="input" />
                                <input name="username" placeholder="T√†i kho·∫£n ƒëƒÉng nh·∫≠p" required className="input" />
                                <input name="password" type="password" placeholder="M·∫≠t kh·∫©u" required className="input" />

                            </div>

                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <Select
                                    components={customComponents}
                                    name="hospital"
                                    options={hospitals.map(h => ({ value: h._id, label: h.name }))}
                                    className="basic-select"
                                    placeholder="Ch·ªçn b·ªánh vi·ªán"
                                    classNamePrefix="select"
                                    required
                                />

                                <Select
                                    components={customComponents}
                                    name="city"
                                    options={cities.map(city => ({ value: city.name, label: city.name }))}
                                    className="basic-select"
                                    placeholder="Ch·ªçn t·ªânh/th√†nh"
                                    classNamePrefix="select"
                                    required
                                />
                                <Select
                                    components={customComponents}
                                    name="rank"
                                    options={levels.map(l => ({ value: l._id, label: l.name }))}
                                    className="basic-select"
                                    placeholder="Ch·ªçn c·∫•p b·∫≠c"
                                    classNamePrefix="select"
                                    required
                                />

                                <Select
                                    components={customComponents}
                                    required
                                    isMulti
                                    value={specialtyOptions.filter((option: any) =>
                                        specialitySelected.includes(option.value)
                                    )}
                                    name="specialty"
                                    options={specialtyOptions}
                                    className="basic-multi-select"
                                    placeholder="Ch·ªçn chuy√™n khoa"
                                    classNamePrefix="select"
                                    onChange={(selected: any) => setSpecialitySelected(selected.map((item: any) => item.value))}
                                />
                                <input name="position" type="text" placeholder="Ch·ª©c v·ª•" className="input" />
                                <input name="licenseNo" placeholder="M√£ gi·∫•y ph√©p h√†nh ngh·ªÅ" required className="input" />
                            </div>

                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <input name="experienceYears" type="number" min={0} placeholder="NƒÉm kinh nghi·ªám" className="input" />
                                <input name="isActive" value="false" hidden />
                            </div>
                            <div className="flex items-center gap-2 text-sm">
                                <input
                                    type="checkbox"
                                    name="agreePolicy"
                                    required
                                    className=" w-5 h-5"
                                />
                                <label htmlFor="agreePolicy">
                                    T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                                    <a
                                        href="/privacy-policy#terms-of-service"
                                        target="privacy-policy#terms-of-service"
                                        rel="noopener noreferrer"
                                        className="text-blue-600 underline hover:text-blue-800"
                                    >
                                        ch√≠nh s√°ch v√† ƒëi·ªÅu kho·∫£n c·ªßa TalkToDoc
                                    </a>
                                </label>

                            </div>
                            <p className="text-gray-600 text-sm">
                                Vi·ªác ƒëƒÉng k√Ω ƒë·ªìng nghƒ©a b·∫°n ch·∫•p nh·∫≠n tu√¢n th·ªß c√°c quy ƒë·ªãnh c·ªßa TalkToDoc nh∆∞ x√°c minh gi·∫•y ph√©p h√†nh ngh·ªÅ, b·∫£o m·∫≠t th√¥ng tin b·ªánh nh√¢n v√† cam k·∫øt cung c·∫•p d·ªãch v·ª• kh√°m ch·ªØa b·ªánh ch·∫•t l∆∞·ª£ng.
                            </p>
                            <div className="text-center">
                                <button
                                    type="submit"
                                    disabled={loading}
                                    className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-6 rounded-md transition duration-300"
                                >
                                    {loading ? "ƒêang g·ª≠i..." : "G·ª≠i y√™u c·∫ßu"}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                <DoctorLevelTable data={levels} />
            </main>
        </>
    );
}